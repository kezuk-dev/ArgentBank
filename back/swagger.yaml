swagger: "2.0"
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: "1.0.0"
  termsOfService: "http://swagger.io/terms/"
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: "#/definitions/Login"
      produces:
        - application/json
      responses:
        "200":
          description: Login Successfully
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: "#/definitions/User"
      produces:
        - application/json
      responses:
        "200":
          description: Signup Successfully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      #produces:
      # - application/json
      responses:
        "200":
          description: User profile retrieved successully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: "#/definitions/UserProfile"
      produces:
        - application/json
      responses:
        "200":
          description: User profile retrieved successully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
  #------ NEW ENDPOINTS -------#
  /user/accounts/{userId}:
    get:
      security:
        - Bearer: []
      tags:
        - Account Module
      summary: Get User Accounts
      description: API to retrieve all accounts of a specific user
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to retrieve accounts for
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Accounts retrieved successfully
          schema:
            $ref: "#/definitions/AccountList"
        "500":
          description: Internal Server Error
  /user/{accountId}/transactions:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get Account Transactions
      description: API to retrieve all transactions of a specific account
      parameters:
        - in: path
          name: accountId
          required: true
          description: ID of the account to retrieve transactions for
          type: string
        - in: query
          name: start_date
          description: Start date of the month to filter transactions
          type: string
          format: YYYY-MM-DD
          # Definir dans le backend la logic start_date #
      produces:
        - application/json
      responses:
        "200":
          description: Transactions retrieved successfully
          schema:
            $ref: "#/definitions/TransactionList"
        "404":
          description: Account not found
        "500":
          description: Internal Server Error
  /user/transactions/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get Transaction Details
      description: API to retrieve details of a specific transaction
      parameters:
        # - in: path
        #   name: accountId
        #   required: true
        #   description: ID of the account containing the transaction
        #   type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to retrieve details for
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Transaction details retrieved successfully
          schema:
            $ref: "#/definitions/TransactionDetails"
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
  /user/transactions/{transactionId}/note:
    post:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Add Note to Transaction
      description: API to add a note to a specific transaction
      parameters:
        # - in: path
        #   name: accountId
        #   required: true
        #   description: ID of the account containing the transaction
        #   type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to add the note to
          type: string
        - in: body
          name: body
          description: Note payload
          required: true
          schema:
            $ref: "#/definitions/NotePayload"
      produces:
        - application/json
      responses:
        "200":
          description: Note added successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Update Note of Transaction
      description: API to update the note of a specific transaction
      parameters:
        # - in: path
        #   name: accountId
        #   required: true
        #   description: ID of the account containing the transaction
        #   type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to update the note for
          type: string
        - in: body
          name: body
          description: Updated note payload
          required: true
          schema:
            $ref: "#/definitions/NotePayload"
      produces:
        - application/json
      responses:
        "200":
          description: Note updated successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    delete:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Delete Note of Transaction
      description: API to delete the note of a specific transaction
      parameters:
        # - in: path
        #   name: accountId
        #   required: true
        #   description: ID of the account containing the transaction
        #   type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to delete the note from
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Note deleted successfully
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
  /user/transactions/{transactionId}/type:
    post:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Add TransactionType to Transaction
      description: API to add a transactionType to a specific transaction
      parameters:
        # - in: path
        #   name: accountId
        #   required: true
        #   description: ID of the account containing the transaction
        #   type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to add the transactionType
          type: string
        - in: body
          name: body
          description: TransactionType payload
          required: true
          schema:
            $ref: "#/definitions/TypePayload"
      produces:
        - application/json
      responses:
        "200":
          description: TransactionType added successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Update TransactionType of Transaction
      description: API to update the transactionType of a specific transaction
      parameters:
        # - in: path
        #   name: accountId
        #   required: true
        #   description: ID of the account containing the transaction
        #   type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to update the transactionType for
          type: string
        - in: body
          name: body
          description: Updated transactionType payload
          required: true
          schema:
            $ref: "#/definitions/TypePayload"
      produces:
        - application/json
      responses:
        "200":
          description: TransactionType updated successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    delete:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Delete transactionType of Transaction
      description: API to delete the transactionType of a specific transaction
      parameters:
        # - in: path
        #   name: accountId
        #   required: true
        #   description: ID of the account containing the transaction
        #   type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to delete the transactionType from
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: TransactionType deleted successfully
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
  /user/transactions/{transactionId}/category:
    post:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Add Category to Transaction
      description: API to add a category to a specific transaction
      parameters:
        # - in: path
        #   name: accountId
        #   required: true
        #   description: ID of the account containing the transaction
        #   type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to add the category
          type: string
        - in: body
          name: body
          description: Category payload
          required: true
          schema:
            $ref: "#/definitions/CategoryPayload"
      produces:
        - application/json
      responses:
        "200":
          description: Category added successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Update Category of Transaction
      description: API to update the category of a specific transaction
      parameters:
        # - in: path
        #   name: accountId
        #   required: true
        #   description: ID of the account containing the transaction
        #   type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to update the category for
          type: string
        - in: body
          name: body
          description: Updated category payload
          required: true
          schema:
            $ref: "#/definitions/CategoryPayload"
      produces:
        - application/json
      responses:
        "200":
          description: Category updated successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    delete:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Delete category of Transaction
      description: API to delete the category of a specific transaction
      parameters:
        # - in: path
        #   name: accountId
        #   required: true
        #   description: ID of the account containing the transaction
        #   type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to delete the category from
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Category deleted successfully
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
#------ NEW ENDPOINTS -------#
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      # id:
      #   type: string
      #   description: userId
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
      userName:
        type: string
        description: user public name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      userName:
        type: string
  #------- AJOUT DEFINITIONS -------#
  AccountList:
    type: array
    items:
      $ref: "#/definitions/Account"
  Account:
    type: object
    properties:
      id:
        type: string
        description: accountId
  TransactionList:
    type: array
    items:
      $ref: "#/definitions/Transaction"
  Transaction:
    type: object
    properties:
      id:
        type: string
        description: transactionId
      date:
        type: string
        description: date of transaction
      description:
        type: string
        description: description of transaction
      amount:
        type: string
        description: amount of transaction
      balance:
        type: string
        description: balance of transaction
      details:
        type: object
        description: details of transaction
        items:
          $ref: "#/definitions/TransactionDetails"
  TransactionDetails:
    type: object
    properties:
      note:
        type: string
        description: transaction note
      transactiontype:
        type: string
        description: transaction type
      category:
        type: string
        description: transaction category
  NotePayload:
    type: object
    properties:
      note:
        type: string
        description: The note to be added or updated
  TypePayload:
    type: object
    properties:
      transactionType:
        type: string
        description: The transaction type to be added or updated
  CategoryPayload:
    type: object
    properties:
      category:
        type: string
        description: The category to be added or updated
